scalar DateTime

interface Node {
	id: ID!
}

enum MetricsKind {
	BOOLEAN
	FLOAT
	NORMALIZED_FLOAT
}

type Metrics implements Node {
	id: ID!
	name: String!
	kind: MetricsKind!
	minimized: Boolean
}

interface BaseCollectedMetrics {
    metrics: Metrics!
    exam: Exam!
}

type FloatCollectedMetrics implements Node BaseCollectedMetrics {
    id: ID!
    metrics: Metrics!
    value: Float!
#    exam: Exam! @relation(name: "examMetrics")
}

#type BooleanCollectedMetrics implements Node BaseCollectedMetrics {
#    id: ID!
#    metrics: Metrics!
#    value: Boolean!
#    exam: Exam!
#}

#union CollectedMetrics = FloatCollectedMetrics | BooleanCollectedMetrics

# type Exam implements Node {
# 	id: ID!
# 	createdOn: DateTime!
# }

type Subject implements Node {
    id: ID!
    name: String
    description: String
    metricsSummary: [FloatCollectedMetrics!] @relation(name: "metricsSummary")
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type Query {
  hello: String
	subject(id: ID!): Subject
}